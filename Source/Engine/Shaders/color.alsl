// 统一设置Shader版本
#version 330 core

#vtx
    layout (location = 0) in vec3 aPos;
    layout (location = 1) in vec2 aUv;
    layout (location = 2) in vec3 aNormal;
    layout (location = 3) in vec3 aColor;

    layout (location = 0) out vec3 outColor;
    layout (location = 1) out vec2 outUv;
    layout (location = 2) out vec3 outNormal;
    layout (location = 3) out vec3 outFragPos;

    uniform mat4 model;
    uniform mat4 view;
    uniform mat4 proj;

    void main() {
        outColor = aColor;
        outUv = aUv;
        outNormal = aNormal;
        outFragPos = vec3(model * vec4(aPos, 1.0f));
        gl_Position = proj * view * vec4(outFragPos, 1.0f);
    }
#end

#frag
    layout (location = 0) in vec3 aColor;
    layout (location = 1) in vec2 aUv;
    layout (location = 2) in vec3 aNormal;
    layout (location = 3) in vec3 aFragPos;

    uniform vec3 objectColor;
    uniform vec3 lightPos;
    uniform vec3 viewPos;

    out vec4 FragColor;

    struct Material {
        float shininess;
    };

    uniform sampler2D materialDiffuse;
    uniform sampler2D materialSpecular;

    struct Light {
        vec3 position;
        vec3 ambient;
        vec3 diffuse;
        vec3 specular;
    };

    uniform Light light;
    uniform Material material;

    void main() {
        // 环境光
        vec3 ambient = light.ambient * texture(materialDiffuse, aUv).rgb;

        // 漫反射
        vec3 normal = normalize(aNormal);
        vec3 lightDir = normalize(lightPos - aFragPos);
        float diff = max(dot(normal, lightDir), 0.0f);
        vec3 diffuse = light.diffuse * diff * texture(materialDiffuse, aUv).rgb;

        // 镜面反射
        vec3 viewDir = normalize(viewPos - aFragPos);
        vec3 reflectDir = reflect(-lightDir, normal);
        float spec = pow(max(dot(viewDir, reflectDir), 0.0f), material.shininess);
        vec3 specular = light.specular * spec * texture(materialSpecular, aUv).rgb;

        vec3 result = (ambient + diffuse + specular) * objectColor;
        FragColor = vec4(result, 1.0f);
    }
#end